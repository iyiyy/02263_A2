NET
scheme TIMETABLE = extend NET with
class
  type 
    Trip ::
      id : StopId
      arrt : Time
      dept : Time, -- a trip in a time table
    
    TimeTable = TramId -m-> Plan, -- time tables as a map
    Plan = Trip-list, -- a list of trips 
    TramId = Text -- tram names

  value /* generators */
    -- the empty timetable
    empty: TimeTable = [],

    -- add to a time table an empty plan for a new tram
    addTram: TramId >< TimeTable -> TimeTable
    addTram(tid, tt) is (
      tt !! [tid +> <..>]
    ),

    -- add a stop with arrival time and departure time to the plan for a given tram
    addStop: TramId >< StopId >< Time >< Time >< TimeTable -> TimeTable
    addStop(tid, sid, arrt, dept, tt) is (
      tt !! [tid +> getPlan(tid, tt) ^ <.mk_Trip(sid, arrt, dept).>]
    ),

    getPlan : TramId >< TimeTable -~-> Plan
    getPlan(tid, tt) is (
      hd rng (tt / {tid})
    )
    -- get
    value /* observers */
    -- check whether a tram with a given name exists in a given time table
    isIn : TramId >< TimeTable -> Bool
    isIn(tid, tt) is (
      tid isin tt
    ),
    -- you can add more observers here
    --...
    combineAllPlans : TimeTable -> Plan
    combineAllPlans(tt) is (
      local
        variable
          ps : Plan-set := rng tt,
          totalPlan : Plan := <..>
        in
          while ps ~= {} do 
            totalPlan := totalPlan ^ hd ps;
            ps := ps \ {hd ps}
        end;
        totalPlan
      end
    ),

    consistent : Plan >< Net -> Bool
    consistent(p, n) is (
      local
        variable
          i : Nat := 1,
          j : Nat := 2,
          b1 : Bool := true,
          b2 : Bool := true,
          stp1 : Stop := emptyStop,
          stp2 : Stop := emptyStop,
          c : Connection := emptyConn
        in
          while j <= len p /\ b1 ~= false /\ b2 ~= false do
            stp1 := getStop(id(p(i)), n);
            stp2 := getStop(id(p(j)), n);
            c := getConnection(id(stp1), id(stp2), n);
            if hasData(c) then
              b1 := dept(p(i)) - arrt(p(i)) >= wt(stp1); --wait time violated?
              b2 := arrt(p(j)) - dept(p(i)) >= dt(t(c)); --drive time violated?
              i := i + 1;
              j := j + 1
            else
              b1 := false;
              b2 := false
            end
          end;
          b1 /\ b2
        end
    ),

    allPlansConsistent : TimeTable >< Net -> Bool
    allPlansConsistent(tt, n) is (
      let
        ps = rng tt
      in
        if ps = {} then
          false
        else
          all p : Plan :- p isin ps =>
            consistent(p, n)
        end
      end
    ),

    noStationCollisions : Plan >< Net -> Bool
    noStationCollisions(p, n) is (
      all t1 : Trip :- t1 isin p => (
        let
          s = getStop(id(t1), n),
          cap = cap(s),
          wt = wt(s),
          sameStations = {t2 | t2 : Trip :- t2 isin p /\ id(t2) = id(t1)}, -- subset of trips to the same station
          possibleArrConflicts = {t2 | t2 : Trip :- t2 isin sameStations /\ 
            dept(t1) >= arrt(t2) /\ dept(t1) - arrt(t2) < wt} -- subset of trips overlapping in time at the station
        in
          card possibleArrConflicts <= cap
        end
      )
    ) 

value /* predicates to check time tables */   
  isWellformed : TimeTable >< Net -> Bool
  isWellformed(tt, n) is (
    allPlansConsistent(tt, n) /\ noStationCollisions(combineAllPlans(tt), n)
  )
end  
