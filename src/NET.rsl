scheme NET =
class
  type 
   Net ::
     stops : Stop-set
     conns : (StopId >< StopId >< Connection)-set,
   
   Stop ::
     id : StopId
     cap : Capacity
     wt : WaitingTime,
   
   StopId = Text,  -- names of stops
   Capacity = Nat, -- capacities
   WaitingTime = Time, -- minimum waiting times 
   DrivingTime = Time, -- minimum driving times
   Connection = Capacity >< DrivingTime,
   Time = Nat -- times in number of minutes

  value /* generators */
    empty :  Net = mk_Net({}, {}),  -- the empty net

    -- insert a stop with a given name, capacity and minimum waiting time
    insertStop : StopId >< Capacity >< WaitingTime >< Net -> Net
    insertStop(id, cap, wt, currNet) is (
      let
        newStop = mk_Stop(id, cap, wt)
      in
        mk_Net(stops(currNet) union {newStop}, conns(currNet))
      end
    ),
    
    -- add a connection between given stops, 
    -- with a given capacity and a given minimum driving time 
    addConnection : StopId >< StopId >< Capacity >< DrivingTime >< Net -> Net 
    addConnection(id1, id2, c, dt, currNet) is (
      let
        ss = stops(currNet),
        entry = (id1, id2, (c, dt))
      in
        mk_Net(ss, conns(currNet) union {entry})
      end
    )
    
<<<<<<< HEAD
  --value /* observers */

=======
   
  value /* observers */
>>>>>>> branch 'master' of https://github.com/iyiyy/02263_A2.git
    -- check whether a stop is in a network     
    isIn : StopId >< Net -> Bool
    isIn(sId, n) is (
      exists s : Stop :- s isin stops(n) /\ id(s) = sId
    )
 
    -- get the capacity of a stop 
    --capacity : StopId >< Net -~-> Capacity
    --capacity(sId, n) is (
       
    --)

    -- get the minimum waiting time of a stop 
    --minWaitingTime : StopId >< Net -~-> Time,

    -- check whether two stops are directly connected in a network        
    --areDirectlyConnected : StopId >< StopId >< Net -> Bool,

    -- get the capacity for a connection between two connected stops
    --capacity : StopId >< StopId >< Net -~-> Capacity,

    -- get minimum driving time between two connected stops        
    --minDrivingTime : StopId >< StopId >< Net -~-> Time
 
  --value /* predicates to check nets */
    --isWellformed : Net -> Bool
    --isWellformed(n) is true
    
    -- get all the stops in the net
    --getStops : Net -> Stop-set
    --getStops((stops, conns)) is stops
    
  test_case
    [t0] insertStop("s1", 1, 1, empty),
    [t1]
      let
        currNet = insertStop("s1", 1, 1, empty)
      in
        insertStop("s2", 1, 1, currNet)
      end,
    [t2]
      let
        net = insertStop("s1", 1, 1, insertStop("s2", 1, 1, empty))
      in
        addConnection("s1", "s2", 1, 12, net)
      end,
    [t3]
      let
        currNet = insertStop("s1", 1, 1, empty)
      in
        isIn("s1", currNet)
      end
end  