scheme NET =
class
  type 
   Net = (Stop >< Stop >< Connection)-set, -- tram nets
   StopId = Text,  -- names of stops
   Capacity = Nat, -- capacities
   WaitingTime = Time, -- minimum waiting times 
   DrivingTime = Time, -- minimum driving times
   Stop = StopId >< Capacity >< WaitingTime,
   Connection = Capacity >< DrivingTime,
   Time = Nat -- times in number of minutes

  value /* generators */
    empty :  Net,  -- the empty net

    -- insert a stop with a given name, capacity and minimum waiting time
    insertStop : StopId >< Capacity >< WaitingTime >< Net -> Net
    insertstop(stopId, capacity, waitTime, currNet) is
      currNet union (stopId >< capacity >< DrivingTime),

    -- add a connection between given stops, 
    -- with a given capacity and a given minimum driving time 
    addConnection : StopId >< StopId >< Capacity >< DrivingTime >< Net -> Net 
   	addConnection (stopId1, stopId2, capacity, drivingTime, net) is 
  value /* observers */
    -- check whether a stop is in a network     
    isIn : StopId >< Net -> Bool,
 
    -- get the capacity of a stop 
    capacity : StopId >< Net -~-> Capacity,

    -- get the minimum waiting time of a stop 
    minWaitingTime : StopId >< Net -~-> Time,

    -- check whether two stops are directly connected in a network        
    areDirectlyConnected : StopId >< StopId >< Net -> Bool,

    -- get the capacity for a connection between two connected stops
    capacity : StopId >< StopId >< Net -~-> Capacity,

    -- get minimum driving time between two connected stops        
    minDrivingTime : StopId >< StopId >< Net -~-> Time
 
  value /* predicates to check nets */
    isWellformed : Net -> Bool
    isWellformed(n) is true
end  